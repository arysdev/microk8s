apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config-map
data:
  REDIS_NODES: "redis-0.redis.default.svc.cluster.local,redis-1.redis.default.svc.cluster.local,redis-2.redis.default.svc.cluster.local"

  redis.conf: |

    maxmemory 1000mb
    maxmemory-policy allkeys-lru
    protected-mode no 
    notify-keyspace-events Ex
    dir /data/
    save 60 1000
    dbfilename rdb-dump.rdb
    appendonly yes
    appendfilename "aof-appendonly.aof"
    bind 0.0.0.0

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  serviceName: redis
  replicas: 3
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                    - redis
              topologyKey: "kubernetes.io/hostname"
      initContainers:
      - name: config
        image: redis/redis-stack-server
        command: [ "sh", "-c", "/scripts/redis_init.sh" ]
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis/
        - name: config
          mountPath: /tmp/redis/
        - name: init-script
          mountPath: /scripts/
      containers:
      - name: redis
        image: redis/redis-stack-server
        command: ["redis-server"]
        args: ["/etc/redis/redis.conf"]
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        volumeMounts:
        - name: data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis/
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
      volumes:
      - name: data
        emptyDir: {}
      - name: redis-config
        emptyDir: {}
      - name: init-script
        configMap:
          name: redis-scripts-config-map
          defaultMode: 0777
          items:
          - key: redis_init.sh
            path: redis_init.sh
      - name: config
        configMap:
          name: redis-config-map
          items:
          - key: redis.conf
            path: redis.conf
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi


---
apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    app: redis
spec:
  type: ClusterIP
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
    name: redis
  selector:
    app: redis

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-scripts-config-map
data:  

  sentinel_init.sh: |
    #!/bin/bash
    for i in ${REDIS_NODES//,/ }
    do
        echo "finding master at $i"
        MASTER=$(redis-cli --no-auth-warning --raw -h $i info replication | awk '{print $1}' | grep master_host: | cut -d ":" -f2)
        
        if [ "${MASTER}" == "" ]; then
            echo "no master found"
            MASTER=
        else
            echo "found ${MASTER}"
            break
        fi
        
    done
    echo "sentinel monitor mymaster ${MASTER} 6379 2" >> /tmp/master
    echo "port 5000
    $(cat /tmp/master)
    sentinel resolve-hostnames yes
    sentinel announce-hostnames yes
    sentinel down-after-milliseconds mymaster 5000
    sentinel failover-timeout mymaster 5000
    sentinel parallel-syncs mymaster 1
    protected-mode no
    sentinel announce-ip ${HOSTNAME}.sentinel
    sentinel announce-port 5000
    " > /etc/redis/sentinel.conf
    cat /etc/redis/sentinel.conf

  redis_init.sh: |
    #!/bin/bash
    cp /tmp/redis/redis.conf /etc/redis/redis.conf
    echo "replica-announce-ip ${HOSTNAME}.redis.default.svc.cluster.local" >> /etc/redis/redis.conf
    echo "replica-announce-port 6379 " >> /etc/redis/redis.conf
    
    echo "finding master..."
    if [ "$(timeout 5 redis-cli -h sentinel -p 5000 ping)" != "PONG" ]; then
      echo "sentinel not found, defaulting to redis-0"
      if [ ${HOSTNAME} == "redis-0" ]; then
        echo "this is redis-0, not updating config..."
      else
        echo "updating redis.conf..."
        echo "repl-ping-replica-period 10" >> /etc/redis/redis.conf
        echo "slave-read-only no" >> /etc/redis/redis.conf
        echo "slaveof redis-0.redis.default.svc.cluster.local 6379" >> /etc/redis/redis.conf
      fi
    else
      echo "sentinel found, finding master"
      MASTER="$(redis-cli -h sentinel -p 5000 sentinel get-master-addr-by-name mymaster | grep -E '(^redis-*)|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})')"
      if [ "${HOSTNAME}.redis.default.svc.cluster.local" == ${MASTER} ]; then
        echo "this is master, not updating config..."
      else
        echo "master found : ${MASTER}, updating redis.conf"
        echo "slaveof ${MASTER} 6379" >> /etc/redis/redis.conf
        echo "slave-read-only no" >> /etc/redis/redis.conf
        echo "repl-ping-replica-period 10" >> /etc/redis/redis.conf
      fi
    fi
